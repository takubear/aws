"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const ec2 = require("../lib");
let app;
let stack;
beforeEach(() => {
    app = new core_1.App();
    stack = new core_1.Stack(app, 'Stack', {
        env: { account: '1234', region: 'testregion' },
    });
});
test('can make and use a Windows image', () => {
    // WHEN
    const image = new ec2.GenericWindowsImage({
        testregion: 'ami-1234',
    });
    // THEN
    const details = image.getImage(stack);
    expect(details.imageId).toEqual('ami-1234');
    expect(details.osType).toEqual(ec2.OperatingSystemType.WINDOWS);
});
test('can make and use a Generic SSM image', () => {
    // WHEN
    const image = new ec2.GenericSSMParameterImage('testParam', ec2.OperatingSystemType.LINUX);
    // THEN
    const details = image.getImage(stack);
    expect(details.imageId).toContain('TOKEN');
    expect(details.osType).toEqual(ec2.OperatingSystemType.LINUX);
});
test('WindowsImage retains userdata if given', () => {
    // WHEN
    const ud = ec2.UserData.forWindows();
    const image = new ec2.GenericWindowsImage({
        testregion: 'ami-1234',
    }, {
        userData: ud,
    });
    // THEN
    const details = image.getImage(stack);
    expect(details.userData).toEqual(ud);
});
test('WindowsImage creates UserData if not given', () => {
    // WHEN
    const image = new ec2.GenericWindowsImage({
        testregion: 'ami-1234',
    });
    // THEN
    const details = image.getImage(stack);
    expect(isWindowsUserData(details.userData)).toBeTruthy();
});
test('LookupMachineImage default search', () => {
    // GIVEN
    // WHEN
    new ec2.LookupMachineImage({ name: 'bla*', owners: ['amazon'] }).getImage(stack);
    // THEN
    const missing = app.synth().manifest.missing || [];
    expect(missing).toEqual([
        {
            key: 'ami:account=1234:filters.image-type.0=machine:filters.name.0=bla*:filters.state.0=available:owners.0=amazon:region=testregion',
            props: {
                account: '1234',
                region: 'testregion',
                owners: ['amazon'],
                filters: {
                    'name': ['bla*'],
                    'state': ['available'],
                    'image-type': ['machine'],
                },
            },
            provider: 'ami',
        },
    ]);
});
test('LookupMachineImage creates correct type of UserData', () => {
    // WHEN
    const linuxDetails = new ec2.LookupMachineImage({ name: 'bla*', owners: ['amazon'] }).getImage(stack);
    const windowsDetails = new ec2.LookupMachineImage({ name: 'bla*', owners: ['amazon'], windows: true }).getImage(stack);
    // THEN
    expect(isWindowsUserData(windowsDetails.userData)).toBeTruthy();
    expect(isLinuxUserData(linuxDetails.userData)).toBeTruthy();
});
function isWindowsUserData(ud) {
    return ud.render().indexOf('powershell') > -1;
}
function isLinuxUserData(ud) {
    return ud.render().indexOf('bash') > -1;
}
//# sourceMappingURL=data:application/json;base64,