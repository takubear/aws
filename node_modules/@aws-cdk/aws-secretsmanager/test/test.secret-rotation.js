"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/core");
const secretsmanager = require("../lib");
module.exports = {
    'secret rotation single user'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const secret = new secretsmanager.Secret(stack, 'Secret');
        const target = new ec2.Connections({
            defaultPort: ec2.Port.tcp(3306),
            securityGroups: [new ec2.SecurityGroup(stack, 'SecurityGroup', { vpc })],
        });
        const excludeCharacters = ' ;+%{}' + '@\'"`/\\#'; // DMS and BASH problem chars
        // WHEN
        new secretsmanager.SecretRotation(stack, 'SecretRotation', {
            application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,
            secret,
            target,
            vpc,
            excludeCharacters: excludeCharacters,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroupIngress', {
            IpProtocol: 'tcp',
            Description: 'from SecretRotationSecurityGroupAEC520AB:3306',
            FromPort: 3306,
            GroupId: {
                'Fn::GetAtt': [
                    'SecurityGroupDD263621',
                    'GroupId',
                ],
            },
            SourceSecurityGroupId: {
                'Fn::GetAtt': [
                    'SecretRotationSecurityGroup9985012B',
                    'GroupId',
                ],
            },
            ToPort: 3306,
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::SecretsManager::RotationSchedule', {
            SecretId: {
                Ref: 'SecretA720EF05',
            },
            RotationLambdaARN: {
                'Fn::GetAtt': [
                    'SecretRotationA9FFCFA9',
                    'Outputs.RotationLambdaARN',
                ],
            },
            RotationRules: {
                AutomaticallyAfterDays: 30,
            },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroup', {
            GroupDescription: 'Default/SecretRotation/SecurityGroup',
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Serverless::Application', {
            Location: {
                ApplicationId: 'arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRDSMySQLRotationSingleUser',
                SemanticVersion: '1.1.60',
            },
            Parameters: {
                endpoint: {
                    'Fn::Join': [
                        '',
                        [
                            'https://secretsmanager.',
                            {
                                Ref: 'AWS::Region',
                            },
                            '.',
                            {
                                Ref: 'AWS::URLSuffix',
                            },
                        ],
                    ],
                },
                functionName: 'SecretRotation',
                excludeCharacters: excludeCharacters,
                vpcSecurityGroupIds: {
                    'Fn::GetAtt': [
                        'SecretRotationSecurityGroup9985012B',
                        'GroupId',
                    ],
                },
                vpcSubnetIds: {
                    'Fn::Join': [
                        '',
                        [
                            {
                                Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                            },
                            ',',
                            {
                                Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                            },
                        ],
                    ],
                },
            },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::SecretsManager::ResourcePolicy', {
            ResourcePolicy: {
                Statement: [
                    {
                        Action: 'secretsmanager:DeleteSecret',
                        Effect: 'Deny',
                        Principal: {
                            AWS: {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            Ref: 'AWS::Partition',
                                        },
                                        ':iam::',
                                        {
                                            Ref: 'AWS::AccountId',
                                        },
                                        ':root',
                                    ],
                                ],
                            },
                        },
                        Resource: '*',
                    },
                ],
                Version: '2012-10-17',
            },
            SecretId: {
                Ref: 'SecretA720EF05',
            },
        }));
        test.done();
    },
    'secret rotation multi user'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const secret = new secretsmanager.Secret(stack, 'Secret');
        const masterSecret = new secretsmanager.Secret(stack, 'MasterSecret');
        const target = new ec2.Connections({
            defaultPort: ec2.Port.tcp(3306),
            securityGroups: [new ec2.SecurityGroup(stack, 'SecurityGroup', { vpc })],
        });
        // WHEN
        new secretsmanager.SecretRotation(stack, 'SecretRotation', {
            application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,
            secret,
            masterSecret,
            target,
            vpc,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Serverless::Application', {
            Parameters: {
                endpoint: {
                    'Fn::Join': [
                        '',
                        [
                            'https://secretsmanager.',
                            {
                                Ref: 'AWS::Region',
                            },
                            '.',
                            {
                                Ref: 'AWS::URLSuffix',
                            },
                        ],
                    ],
                },
                functionName: 'SecretRotation',
                vpcSecurityGroupIds: {
                    'Fn::GetAtt': [
                        'SecretRotationSecurityGroup9985012B',
                        'GroupId',
                    ],
                },
                vpcSubnetIds: {
                    'Fn::Join': [
                        '',
                        [
                            {
                                Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                            },
                            ',',
                            {
                                Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                            },
                        ],
                    ],
                },
                masterSecretArn: {
                    Ref: 'MasterSecretA11BF785',
                },
            },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::SecretsManager::ResourcePolicy', {
            ResourcePolicy: {
                Statement: [
                    {
                        Action: 'secretsmanager:DeleteSecret',
                        Effect: 'Deny',
                        Principal: {
                            AWS: {
                                'Fn::Join': [
                                    '',
                                    [
                                        'arn:',
                                        {
                                            Ref: 'AWS::Partition',
                                        },
                                        ':iam::',
                                        {
                                            Ref: 'AWS::AccountId',
                                        },
                                        ':root',
                                    ],
                                ],
                            },
                        },
                        Resource: '*',
                    },
                ],
                Version: '2012-10-17',
            },
            SecretId: {
                Ref: 'MasterSecretA11BF785',
            },
        }));
        test.done();
    },
    'throws when connections object has no default port range'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const secret = new secretsmanager.Secret(stack, 'Secret');
        const securityGroup = new ec2.SecurityGroup(stack, 'SecurityGroup', {
            vpc,
        });
        // WHEN
        const target = new ec2.Connections({
            securityGroups: [securityGroup],
        });
        // THEN
        test.throws(() => new secretsmanager.SecretRotation(stack, 'Rotation', {
            secret,
            application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,
            vpc,
            target,
        }), /`target`.+default port range/);
        test.done();
    },
    'throws when master secret is missing for a multi user application'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const secret = new secretsmanager.Secret(stack, 'Secret');
        const target = new ec2.Connections({
            defaultPort: ec2.Port.tcp(3306),
            securityGroups: [new ec2.SecurityGroup(stack, 'SecurityGroup', { vpc })],
        });
        // THEN
        test.throws(() => new secretsmanager.SecretRotation(stack, 'Rotation', {
            secret,
            application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_MULTI_USER,
            vpc,
            target,
        }), /The `masterSecret` must be specified for application using the multi user scheme/);
        test.done();
    },
    'rotation function name does not exceed 64 chars'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        const secret = new secretsmanager.Secret(stack, 'Secret');
        const target = new ec2.Connections({
            defaultPort: ec2.Port.tcp(3306),
            securityGroups: [new ec2.SecurityGroup(stack, 'SecurityGroup', { vpc })],
        });
        // WHEN
        const id = 'SecretRotation'.repeat(5);
        new secretsmanager.SecretRotation(stack, id, {
            application: secretsmanager.SecretRotationApplication.MYSQL_ROTATION_SINGLE_USER,
            secret,
            target,
            vpc,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Serverless::Application', {
            Parameters: {
                endpoint: {
                    'Fn::Join': [
                        '',
                        [
                            'https://secretsmanager.',
                            {
                                Ref: 'AWS::Region',
                            },
                            '.',
                            {
                                Ref: 'AWS::URLSuffix',
                            },
                        ],
                    ],
                },
                functionName: 'RotationSecretRotationSecretRotationSecretRotationSecretRotation',
                vpcSecurityGroupIds: {
                    'Fn::GetAtt': [
                        'SecretRotationSecretRotationSecretRotationSecretRotationSecretRotationSecurityGroupBFCB171A',
                        'GroupId',
                    ],
                },
                vpcSubnetIds: {
                    'Fn::Join': [
                        '',
                        [
                            {
                                Ref: 'VPCPrivateSubnet1Subnet8BCA10E0',
                            },
                            ',',
                            {
                                Ref: 'VPCPrivateSubnet2SubnetCFCDAA7A',
                            },
                        ],
                    ],
                },
            },
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,